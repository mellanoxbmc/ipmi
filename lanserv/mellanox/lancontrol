#!/bin/sh

#
# Script for handling external LAN configuration from the
# IPMI deamon.  This command is generally invoked by the mlx_ipmid
# to get and set external LAN configuration parameters.
#
# It's parameters are:
#
#  lancontrol <device> get [parm [parm ...]]
#  lancontrol <device> set|check [parm val [parm val ...]]
#
# where <device> is a network device (eth0, etc.) and parm is one of:
#  ip_addr
#  ip_addr_src
#  mac_addr
#  subnet_mask
#  default_gw_ip_addr
# These are config values out of the IPMI LAN config table that are
# not IPMI-exclusive, they require setting external things.
#
# The output of the "get" is "<parm>:<value>" for each listed parm.
# The output of the "set" is empty on success.  Error output goes to
# standard out (so it can be captured in the simulator) and the program
# returns an error.
#
# The IP address values are standard IP addresses in the form a.b.c.d.
# The MAC addresses ar standard 6 octet xx:xx:xx:xx:xx:xx values.  The
# only special one is ip_addr_src, which can be "dhcp" or "static".
#
# The "check" operation checks to see if a value is valid without
# committing it.
#

tmp_ip_addr="0.0.0.0"
tmp_netmask="0"
tmp_gateway="0.0.0.0"
tmp_ip_addr_src="dhcp"

prog=$0

device=$1
if [ "x$device" = "x" ]; then
    echo "No device given"
    exit 1;
fi
shift

op=$1
if [ "x$op" = "x" ]; then
    echo "No operation given"
    exit 1
fi
shift

do_get() {
    while [ "x$1" != "x" ]; do
	case $1 in
	    ip_addr)
		val=`ifconfig $device | grep '^ *inet addr:' | tr ':' ' ' | sed 's/.*inet addr \([0-9.]*\).*$/\1/'`
		if [ "x$val" = "x" ]; then
		    val="0.0.0.0"
		fi
		;;

	    ip_addr_src)
		if [ ! -f /etc/systemd/network/50-static.network ];  then
			val="dhcp"
		else
			val="static"
		fi
		;;

	    mac_addr)
		val=`ifconfig $device | grep 'HWaddr' | sed 's/.*HWaddr \([0-9a-fA-F:]*\).*$/\1/'`
		if [ "x$val" = "x" ]; then
		    val="00:00:00:00:00:00"
		fi
		;;

	    subnet_mask)
		val=`ifconfig $device | grep '^ *inet addr:' | tr ':' ' ' | sed 's/.*Mask \([0-9.]*\).*$/\1/'`
		if [ "x$val" = "x" ]; then
		    val="0.0.0.0"
		fi
		;;

	    default_gw_ip_addr)
		val=`route -n | grep '^0\.0\.0\.0' | grep "$device\$" | tr ' ' '\t' | tr -s '\t' '\t' | cut -f 2`
		if [ "x$val" = "x" ]; then
		    val="0.0.0.0"
		fi
		;;

	    default_gw_mac_addr)
		val=`route -n | grep '^0\.0\.0\.0' | grep "$device\$" | tr ' ' '\t' | tr -s '\t' '\t' | cut -s -f 2`
		if [ "x$val" = "x" ]; then
		    val="00:00:00:00:00:00"
		else
		    ping -W 1 -c 1 $val >/dev/null 2>&1
		    val=`arp -n $val | grep "($val)" | tr ' ' '\t' | tr -s '\t' '\t' | cut -f 4`
		    if [ "x$val" = "x" -o "x$val" = 'x<incomplete>' ]; then
			val="00:00:00:00:00:00"
		    fi
		fi
		;;

	    backup_gw_ip_addr)
		val="0.0.0.0"
		;;

	    backup_gw_mac_addr)
		val="00:00:00:00:00:00"
		;;

	    *)
		echo "Invalid parameter: $1"
		exit 1
		;;
	esac

	echo "$1:$val"
	shift
    done
}

do_check() {
	case $1 in
	    ip_addr_src)
		# We only support static and dhcp IP address sources
		case $2 in
		    static)
			;;
		    dhcp)
			;;
		    *)
			echo "Invalid ip_addr_src: $2"
			exit 1
			;;
		esac
		;;

		ip_addr | subnet_mask | default_gw_ip_addr)
		if [ "$2" != "`echo $2 | grep -E [0-9]\{1,3\}[.][0-9]\{1,3\}[.][0-9]\{1,3\}[.][0-9]\{1,3\}`" ];
			then
			echo "Invalid value $2 for parameter $1"
			exit 1
		fi
		;;

		mac_addr)
		if [ "$2" != "`echo $2 | grep -E [[:xdigit:]]\{1,2\}[:][[:xdigit:]]\{1,2\}[:][[:xdigit:]]\{1,2\}[:][[:xdigit:]]\{1,2\}[:][[:xdigit:]]\{1,2\}[:][[:xdigit:]]\{1,2\}`" ];
			then
			echo "Invalid value $2 for parameter $1"
			exit 1
		fi
		;;

	    *)
		echo "Invalid parameter: $parm"
		exit 1
		;;
	esac
}

mask2cidr() {
	nbits=0
	IFS=.
	for dec in $1 ; do
		case $dec in
			255) let nbits+=8;;
			254) let nbits+=7;;
			252) let nbits+=6;;
			248) let nbits+=5;;
			240) let nbits+=4;;
			224) let nbits+=3;;
			192) let nbits+=2;;
			128) let nbits+=1;;
			0);;
			*) echo "Error: $dec is not recognized"; exit 1
		esac
	done
	echo "$nbits"
}

do_set() {
	if [ "x$1" = "x" ]
	then
		echo "no parameters given for set command - fail"
		exit 1
	fi
	while [ "x$1" != "x" ]; do
		parm="$1"
		shift
		if [ "x$1" = "x" ]; then
			echo "No value present for parameter $parm"
			exit 1
		fi
		val="$1"
		shift

		do_check $parm $val

		case $parm in
			ip_addr)
				echo $val > /tmp/ip_addr
				;;

			ip_addr_src)
				if [ $val == "dhcp" ]; then
					rm -rf /etc/systemd/network/50-static.network
					systemctl stop systemd-networkd
					systemctl start systemd-networkd
				else
					if [ ! -f /etc/systemd/network/50-static.network ]; then
						echo [Match] >> /etc/systemd/network/50-static.network
						echo Name=eth0 >> /etc/systemd/network/50-static.network
					fi
				fi
				;;

			subnet_mask)
				echo $(mask2cidr $val) > /tmp/subnet_mask
				;;

			default_gw_ip_addr)
				echo $val > /tmp/default_gw_ip_addr
				;;

			mac_addr)
				if [ -f /etc/systemd/network/50-static.network ]; then
					sed -i '/\b\(Link\|MACAddress\)\b/d' /etc/systemd/network/50-static.network
					echo [Link] >> /etc/systemd/network/50-static.network
					echo MACAddress="$val" >> /etc/systemd/network/50-static.network
					if [ -f /tmp/ip_addr ] && [ -f /tmp/subnet_mask ] && [ -f /tmp/default_gw_ip_addr ]
					then
						ifconfig eth0 down
						systemctl stop systemd-networkd
						systemctl start systemd-networkd
						ifconfig eth0 down
					fi
				else
					sed -i '/\b\(Link\|MACAddress\)\b/d' /usr/lib/systemd/network/default.network
					echo [Link] >> /usr/lib/systemd/network/default.network
					echo MACAddress="$val" >> /usr/lib/systemd/network/default.network
					ifconfig eth0 down
					systemctl stop systemd-networkd
					systemctl start systemd-networkd
					ifconfig eth0 up
				fi
				;;

			*)
				echo "Invalid parameter: $1"
				exit 1
				;;
		esac
	done

	if [ ! -f /tmp/ip_addr ] || [ ! -f /tmp/subnet_mask ] || [ ! -f /tmp/default_gw_ip_addr ]
	then
		echo "no enaugh parameters given - fail"
	else
		tmp_ip_addr="$(</tmp/ip_addr)"
		tmp_netmask="$(</tmp/subnet_mask)"
		tmp_gateway="$(</tmp/default_gw_ip_addr)"
		rm /tmp/ip_addr
		rm /tmp/subnet_mask
		rm /tmp/default_gw_ip_addr
		sed -i '/\b\(Network\|Address\|Gateway\)\b/d' /etc/systemd/network/50-static.network

		echo [Match] >> /etc/systemd/network/50-static.network
		echo Name=eth0 >> /etc/systemd/network/50-static.network
		echo [Network] >> /etc/systemd/network/50-static.network
		echo Address="$tmp_ip_addr"/"$tmp_netmask" >> /etc/systemd/network/50-static.network
		echo Gateway="$tmp_gateway" >> /etc/systemd/network/50-static.network
		systemctl stop systemd-networkd
		systemctl start systemd-networkd
	fi
}

case $op in
    get)
	do_get $@
	;;
    set)
	do_set $@
	;;

    check)
	do_check $@
	;;

*)
	echo "Unknown operation: $op"
	exit 1
esac
